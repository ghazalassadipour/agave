name: build-sbf-pre2024-pin-v5

on:
  workflow_dispatch:
    inputs:
      program_dir:
        description: "Root folder that contains the stake/vote code (e.g. programs/stake or programs/vote)"
        required: true
        default: "programs/stake"
      artifact_prefix:
        description: "Output base name (e.g. solana_stake_program or solana_vote_program)"
        required: true
        default: "solana_stake_program"
      agave_version:
        description: "Agave release tag"
        required: true
        default: "v2.3.9"
      pin_base64ct:
        description: "Pre-2024 base64ct (latest 1.7.x recommended)"
        required: true
        default: "1.7.3"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROGRAM_DIR: ${{ github.event.inputs.program_dir }}
      ARTIFACT_PREFIX: ${{ github.event.inputs.artifact_prefix }}
      AGAVE_VERSION: ${{ github.event.inputs.agave_version }}
      PIN_BASE64CT: ${{ github.event.inputs.pin_base64ct }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: System deps
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            curl ca-certificates git pkg-config libssl-dev build-essential \
            clang llvm lld cmake jq

      - name: Install Rust (host)
        run: |
          set -euxo pipefail
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          rustup default stable
          rustup --version
          cargo --version

      - name: Install Agave CLI
        run: |
          set -euxo pipefail
          curl -sSfL "https://github.com/anza-xyz/agave/releases/download/${AGAVE_VERSION}/agave-install-init-x86_64-unknown-linux-gnu" -o agave-install-init
          chmod +x agave-install-init
          ./agave-install-init "${AGAVE_VERSION}"

          AGAVE_BIN="$HOME/.local/share/agave/install/active_release/bin"
          SOLANA_BIN="$HOME/.local/share/solana/install/active_release/bin"

          if [ -x "$AGAVE_BIN/cargo-build-sbf" ]; then
            echo "$AGAVE_BIN" >> "$GITHUB_PATH"
            export PATH="$AGAVE_BIN:$PATH"
          elif [ -x "$SOLANA_BIN/cargo-build-sbf" ]; then
            echo "$SOLANA_BIN" >> "$GITHUB_PATH"
            export PATH="$SOLANA_BIN:$PATH"
          else
            echo "cargo-build-sbf not found after install."
            find "$HOME/.local/share" -maxdepth 6 -type f -name 'cargo-build-sbf' -print || true
            exit 1
          fi

          which cargo-build-sbf
          cargo-build-sbf --version || true
          command -v agave && agave --version || true
          command -v solana && solana --version || true

      - name: Locate on-chain crate (stake/vote)
        id: locate
        run: |
          set -euxo pipefail
          PD="${PROGRAM_DIR}"

          if [ ! -d "$PD" ]; then
            echo "PROGRAM_DIR not found: $PD" >&2
            exit 1
          fi

          # Collect candidate Cargo.toml files (depth 4 covers common layouts)
          mapfile -t CANDIDATES < <(find "$PD" -maxdepth 4 -type f -name Cargo.toml | sort)

          if [ "${#CANDIDATES[@]}" -eq 0 ]; then
            echo "No Cargo.toml under $PD" >&2
            exit 1
          fi

          choose_manifest() {
            # 1) exact package name match (most reliable)
            for m in "${CANDIDATES[@]}"; do
              if grep -qE '^name\s*=\s*"'${ARTIFACT_PREFIX}'"' "$m"; then
                echo "$m"; return 0
              fi
            done
            # 2) looks like an on-chain crate (solana_program dep and cdylib crate-type)
            for m in "${CANDIDATES[@]}"; do
              if grep -q 'solana_program' "$m" && grep -q 'crate-type' "$m"; then
                echo "$m"; return 0
              fi
            done
            # 3) a non-workspace manifest at PD root
            if [ -f "$PD/Cargo.toml" ] && ! grep -q '^\[workspace\]' "$PD/Cargo.toml"; then
              echo "$PD/Cargo.toml"; return 0
            fi
            return 1
          }

          MANIFEST="$(choose_manifest || true)"
          if [ -z "$MANIFEST" ]; then
            echo "Could not locate an on-chain crate manifest under $PD" >&2
            echo "--- Found Cargo.toml files ---"
            printf '%s\n' "${CANDIDATES[@]}" || true
            echo "-----------------------------"
            exit 1
          fi

          CRATE_DIR="$(dirname "$MANIFEST")"
          echo "CRATE_DIR=$CRATE_DIR" | tee -a "$GITHUB_ENV"

          echo "Selected manifest: $MANIFEST"
          sed -n '1,120p' "$MANIFEST" || true

      - name: Discover workspace root
        id: ws
        working-directory: ${{ env.CRATE_DIR }}
        run: |
          set -euxo pipefail
          WSROOT="$(cargo metadata --format-version 1 --no-deps | jq -r '.workspace_root')"
          echo "WSROOT=$WSROOT" | tee -a "$GITHUB_ENV"
          echo "Workspace root: $WSROOT"
          # Show workspace members (useful for debugging incorrect roots)
          cargo metadata --format-version 1 --no-deps | jq '.packages | map(.name)'

      # --- Pin to a pre-2024 edition base64ct in the *workspace* lockfile ---
      - name: Pin base64ct in workspace lockfile
        working-directory: ${{ env.WSROOT }}
        run: |
          set -euxo pipefail
          cargo generate-lockfile || true
          cargo update -p base64ct --precise "${PIN_BASE64CT}" || true
          if [ -f Cargo.lock ]; then
            echo "Lockfile snippet for base64ct:"
            awk '$0 ~ /^name = "base64ct"$/ {print; getline; print; getline; print}' Cargo.lock || true
          fi

      # --- Build only the program crate; forward Cargo flags after `--` ---
      - name: Build (SBF) with --locked
        working-directory: ${{ env.CRATE_DIR }}
        run: |
          set -euxo pipefail
          cargo-build-sbf -- --locked

      - name: Collect artifact
        run: |
          set -euxo pipefail
          mkdir -p artifacts
          # Prefer an exact match by artifact_prefix; otherwise fall back to any *_program*.so
          so_path="$(find "${CRATE_DIR}/target" -type f -name "${ARTIFACT_PREFIX}*.so" | head -n1 || true)"
          if [ -z "${so_path}" ]; then
            so_path="$(find "${CRATE_DIR}/target" -type f -name "*_program*.so" | head -n1 || true)"
          fi
          if [ -z "${so_path}" ]; then
            echo "Could not find .so under ${CRATE_DIR}/target"
            find "${CRATE_DIR}/target" -maxdepth 4 -type f -name '*.so' -print || true
            exit 1
          fi

          cp "${so_path}" "artifacts/${ARTIFACT_PREFIX}.so"

          # Provenance
          git rev-parse HEAD > artifacts/git_commit.txt
          (agave --version || true) > artifacts/agave_version.txt
          (solana --version || true) > artifacts/solana_version.txt
          (cargo-build-sbf --version || true) > artifacts/cargo_build_sbf_version.txt
          {
            echo "program_dir=${PROGRAM_DIR}"
            echo "crate_dir=${CRATE_DIR}"
            echo "workspace_root=${WSROOT}"
            echo "artifact_prefix=${ARTIFACT_PREFIX}"
            echo "agave_version=${AGAVE_VERSION}"
            echo "pin_base64ct=${PIN_BASE64CT}"
          } > artifacts/build_meta.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-${{ env.AGAVE_VERSION }}
          path: artifacts/*
