name: build-sbf-with-pre-2024-pin

on:
  workflow_dispatch:
    inputs:
      program_dir:
        description: "Path to the program crate (e.g. programs/stake or programs/vote)"
        required: true
        default: "programs/stake"
      artifact_prefix:
        description: "Base name of the output .so (e.g. solana_stake_program or solana_vote_program)"
        required: true
        default: "solana_stake_program"
      agave_version:
        description: "Agave release tag to use"
        required: true
        default: "v2.3.9"
      pin_base64ct:
        description: "Pre-2024 base64ct version to pin (latest 1.7.x recommended)"
        required: true
        default: "1.7.3"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROGRAM_DIR: ${{ github.event.inputs.program_dir }}
      ARTIFACT_PREFIX: ${{ github.event.inputs.artifact_prefix }}
      AGAVE_VERSION: ${{ github.event.inputs.agave_version }}
      PIN_BASE64CT: ${{ github.event.inputs.pin_base64ct }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: System deps
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates git pkg-config libssl-dev build-essential clang llvm lld cmake

      - name: Install Rust (host)
        run: |
          set -euxo pipefail
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          rustup default stable
          rustup --version
          cargo --version

      - name: Install Agave CLI
        run: |
          set -euxo pipefail
          curl -sSfL "https://github.com/anza-xyz/agave/releases/download/${AGAVE_VERSION}/agave-install-init-x86_64-unknown-linux-gnu" -o agave-install-init
          chmod +x agave-install-init
          ./agave-install-init "${AGAVE_VERSION}"

          # Candidate install paths
          AGAVE_BIN="$HOME/.local/share/agave/install/active_release/bin"
          SOLANA_BIN="$HOME/.local/share/solana/install/active_release/bin"

          # Prefer Agave; else Solana
          if [ -x "$AGAVE_BIN/cargo-build-sbf" ]; then
            echo "$AGAVE_BIN" >> "$GITHUB_PATH"
            export PATH="$AGAVE_BIN:$PATH"
          elif [ -x "$SOLANA_BIN/cargo-build-sbf" ]; then
            echo "$SOLANA_BIN" >> "$GITHUB_PATH"
            export PATH="$SOLANA_BIN:$PATH"
          else
            echo "cargo-build-sbf not found after Agave install."
            find "$HOME/.local/share" -maxdepth 6 -type f -name 'cargo-build-sbf' -print || true
            exit 1
          fi

          which cargo-build-sbf
          cargo-build-sbf --version || true
          command -v agave && agave --version || true
          command -v solana && solana --version || true

      - name: Freeze deps to pre-2024 editions (pin base64ct)
        working-directory: ${{ env.PROGRAM_DIR }}
        run: |
          set -euxo pipefail

          # Create a local patch so the resolver never tries base64ct 1.8.x (edition 2024)
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [patch.crates-io]
          base64ct = "=${PIN_BASE64CT}"
          EOF

          # Also place the patch at repo root in case the program participates in a workspace above
          mkdir -p "$GITHUB_WORKSPACE/.cargo"
          cp .cargo/config.toml "$GITHUB_WORKSPACE/.cargo/config.toml"

          # Generate lockfile and then explicitly update base64ct to the pinned pre-2024 version
          cargo generate-lockfile
          cargo update -p base64ct --precise "${PIN_BASE64CT}" || true

          echo "Pinned base64ct version in Cargo.lock (if present):"
          grep -A2 -nE '^name = "base64ct"$' Cargo.lock || true

      - name: Build (SBF)
        working-directory: ${{ env.PROGRAM_DIR }}
        run: |
          set -euxo pipefail
          # Ensure we use the Agave subcommand, honoring the lockfile
          cargo-build-sbf --locked

      - name: Collect artifact
        run: |
          set -euxo pipefail
          mkdir -p artifacts
          # Look for the produced .so under the program's target dir (covers all SBF target layouts)
          so_path="$(find "${PROGRAM_DIR}/target" -type f -name "${ARTIFACT_PREFIX}*.so" -o -name "*_program*.so" | head -n1 || true)"
          if [ -z "${so_path}" ]; then
            echo "Could not find .so under ${PROGRAM_DIR}/target"
            find "${PROGRAM_DIR}/target" -maxdepth 4 -type f -name '*.so' -print || true
            exit 1
          fi

          cp "${so_path}" "artifacts/${ARTIFACT_PREFIX}.so"

          # Record provenance
          git rev-parse HEAD > artifacts/git_commit.txt
          (agave --version || true) > artifacts/agave_version.txt
          (solana --version || true) > artifacts/solana_version.txt
          (cargo-build-sbf --version || true) > artifacts/cargo_build_sbf_version.txt
          echo "program_dir=${PROGRAM_DIR}" > artifacts/build_meta.txt
          echo "artifact_prefix=${ARTIFACT_PREFIX}" >> artifacts/build_meta.txt
          echo "agave_version=${AGAVE_VERSION}" >> artifacts/build_meta.txt
          echo "pin_base64ct=${PIN_BASE64CT}" >> artifacts/build_meta.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-${{ env.AGAVE_VERSION }}
          path: artifacts/*
